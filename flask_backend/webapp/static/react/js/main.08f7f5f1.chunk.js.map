{"version":3,"sources":["Context.js","components/Navbar.js","components/Header.js","components/Messages.js","components/Footer.js","scripts/HandleRedirections.js","routes/Home.js","routes/Login.js","routes/SignUp.js","routes/SignUpGroup.js","components/dashboard/VerifyKeys.js","components/dashboard/AddDataForm.js","components/dashboard/EditValuesForm.js","components/dashboard/DownloadDatasets.js","routes/Dashboard.js","App.js","index.js"],"names":["MessageContext","createContext","UserPasswordContext","Navbar","message","useContext","setUserPassword","useState","pathname","setPath","useEffect","window","location","statusSignUpGroupButton","statusSignUpButton","statusLoginButton","statusLogoutButton","document","title","className","href","onClick","e","Header","Messages","setMessage","cookieNotification","setCookieNotification","cookie","role","type","class","Object","keys","flashed_messages","length","category","msg","Footer","HandleRedirections","to","Home","Login","groupName","setGroupName","username","setUsername","userPassword","for","id","name","placeholder","onChange","target","value","fetch","method","headers","body","JSON","stringify","then","response","json","catch","error","console","log","SignUp","groupPassword","setGroupPassword","SignUpGroup","topics","setTopics","style","height","split","filter","topic","VerifyKeys","classList","setClassList","userList","setUserList","checkVerifications","classes","users","padding","map","_class","user","AddDataForm","values","setClassName","datasetNumber","setDatasetNumber","tableForm","setTableForm","lists","form","globalDatasetDict","irregularData","updateNeed","updateTrigger","table","index","push","topic_list","list","Math","round","abs","user_list","scope","url","pop","EditValuesForm","classGroups","setClassGroups","deleteData","indexOf","class_groups","defaultValue","class_name","colspan","class_id","topic_name","datasets","dataset","dataset_id","data","data_id","record","dataId","newData","DownloadDatasets","blob","saveAs","Dashboard","modalContent","setModalContent","setLists","tabindex","App","isAuthenticated","Provider","path","component","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"js/main.08f7f5f1.chunk.js","sourcesContent":["import { createContext } from 'react';\n\n/* Context for notification messages. */\nexport const MessageContext = createContext(null);\n\n/* Context for the user password in the dashboard. */\nexport const UserPasswordContext = createContext(null)\n","import { useEffect, useState, useContext } from 'react';\n\nimport { MessageContext, UserPasswordContext } from '../Context';\n\n\nexport const Navbar = () => {\n  /* initialize all variable for changeable values */\n  const {message} = useContext(MessageContext),\n        {setUserPassword} = useContext(UserPasswordContext),\n\n        [pathname, setPath] = useState('');\n\n\n  /* update Navbar if message appears */\n  useEffect(() => {\n     /* navbar update uses current url */\n    setPath(window.location.pathname);\n  }, [message])\n\n  /* Initialize visibility status flags for buttons */\n  var statusSignUpGroupButton = '',\n      statusSignUpButton = '',\n      statusLoginButton = '',\n      statusLogoutButton = 'visually-hidden';\n\n  /* validate url */\n  if (pathname === '/auth/sign-up-group' ) {\n    document.title = 'Sign Up Group';\n    statusSignUpGroupButton = 'active';\n    statusLogoutButton = 'visually-hidden';\n  } else if (pathname === '/auth/sign-up') {\n    document.title = 'Sign Up';\n    statusSignUpButton = 'active';\n    statusLogoutButton = 'visually-hidden';\n  } else if (pathname === '/auth/login') {\n    document.title = 'Login';\n    statusLoginButton = 'active';\n    statusLogoutButton = 'visually-hidden';\n  }  else if (pathname === '/dashboard') {\n    document.title = 'Dashboard';\n    statusSignUpGroupButton = 'visually-hidden';\n    statusSignUpButton = 'visually-hidden';\n    statusLoginButton = 'visually-hidden';\n    statusLogoutButton = '';\n  }\n\n  /* return Navbar HTML */\n  return (\n    <div className=\"d-flex flex-wrap align-items-center justify-content-center justify-content-md-between py-3 mb-4 border-bottom container-fluid\">\n      <span className=\"fs-4\"> Document and Content Management Software </span>\n      <ul className=\"nav nav-pills\">\n        <li className=\"nav-item\">\n          <a className={`nav-link ${statusSignUpGroupButton}`} href=\"/auth/sign-up-group\">Sign Up Group</a>\n        </li>\n        <li className=\"nav-item\">\n          <a  href=\"/auth/logout\">\n            <button\n              className={`btn btn-danger ${statusLogoutButton}`}\n              href=\"/auth/logout\"\n              onClick={e => setUserPassword('')}\n            >\n              Logout\n            </button>\n          </a>\n        </li>\n        <li className=\"nav-item\">\n          <a className={`nav-link ${statusSignUpButton}`} href=\"/auth/sign-up\">Sign Up</a>\n        </li>\n        <li className=\"nav-item\">\n          <a className={`nav-link ${statusLoginButton}`} href=\"/auth/login\">Login</a>\n        </li>\n      </ul>\n    </div>\n  );\n}\n","import { Navbar } from './Navbar';\n\n\nexport const Header = () => {\n  /* Header HTML */\n  return (\n    <header>\n      <Navbar />\n    </header>\n  );\n}\n","import { useContext, useState } from 'react';\n\nimport { MessageContext } from '../Context';\n\n\nexport const Messages = () => {\n  const {message, setMessage} = useContext(MessageContext),\n\n        [cookieNotification, setCookieNotification] = useState(true);\n\n  /* return Notification Message HTML */\n  return (\n    <div className=\"container container-fluid\">\n      {/* generate a cookie message if the user visits the website for the first time */}\n      { cookieNotification && document.cookie === '' ? (\n        <div className=\"alert alert-primary alert-dismissible fade show\" role=\"alert\">\n          <strong>The website uses cookies!</strong>\n          <br />\n          Cookies are necessary to ensure the functionality of the website.\n          <button\n            type=\"button\" \n            class=\"btn-close\" \n            aria-label=\"Close\"\n            onClick={() => {\n              setCookieNotification(false);\n              document.cookie = '_';\n            }}\n          >\n          </button>\n        </div>\n      ): null }\n\n      {/* generate an error message based on the flashed messages */}\n      { Object.keys(window.flashed_messages).length === 2 ? (\n        <div className={ `alert alert-${ window.flashed_messages.category } alert-dismissible fade show` } role=\"alert\">\n          { window.flashed_messages.message }\n          <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button>\n        </div>\n      ): null }\n\n      {/* generate a message based on API-Return-Message */}\n      { message ? (\n        <div\n          className={`alert alert-${ message.category ? (message.category): 'secondary' }\n          d-flex align-items-center container`}\n          role=\"alert\"\n        >\n          <div className=\"container\">\n\n            {/* custom error messages */}\n            { message.msg }\n\n            {/* flask error messages */}\n            { message.message }\n\n          </div>\n          <button\n            type=\"button\"\n            className=\"btn-close\"\n            aria-label=\"Close\"\n            onClick={() => setMessage(null)}\n          ></button>\n        </div>\n      ): null }\n    </div>\n  );\n}\n","export const Footer = () => {\n  /* Footer HTML */\n  return (\n    <footer className=\"d-none d-lg-block footer sticky-bottom mt-auto py-3 bg-light container-fluid\" role=\"alert\">\n      <center>\n        <span className=\"text-muted\">&copy; 2021 Valentin Svet </span>\n        <span> &lt;valentin.svet.12345@gmail.com&gt; </span>\n        <span>\n          <button\n            type=\"button\"\n            class=\"btn btn-secondary\"\n            data-bs-container=\"body\"\n            data-bs-toggle=\"popover\"\n            data-bs-placement=\"top\"\n            data-bs-content={`\n              Redistribution and use in source and binary forms,\n              with or without modification, are permitted provided that the following conditions are met:\n              1. Redistributions of source code must retain the above copyright notice,\n                 this list of conditions and the following disclaimer.\n              2. Redistributions in binary form must reproduce the above copyright notice,\n                 this list of conditions and the following disclaimer in the documentation\n                 and/or other materials provided with the distribution.\n              3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse\n                 or promote products derived from this software without specific prior written permission.\n              THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n              \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n              INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n              MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n              IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\n              FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n              (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n              LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n              WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING\n              IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n            `}\n          >\n            License\n          </button>\n        </span>\n      </center>\n    </footer>\n  );\n}\n","import { useContext } from 'react';\nimport { Redirect } from 'react-router';\n\nimport { MessageContext } from '../Context';\n\n\nexport const HandleRedirections = () => {\n  const { message } = useContext(MessageContext);\n\n  /* generates Redirection based on notification message */\n  if (message) {\n    if (message.msg === 'The group has been registered!') {\n      return( <Redirect to='/auth/sign-up'/> );\n    } else if (message.msg === 'Account was created and you were logged in automatically!' || message.msg === 'You have been logged in!') {\n      return( <Redirect to='/dashboard'/> );\n    }\n  }\n\n  return null;\n}\n","export const Home = () => {\n  /* start page of the webapp */\n  return (\n    <div className=\"container alert alert-success\"role=\"alert\">\n      <h2 className=\"alert-heading\">Welcome!</h2>\n      <h4 className=\"h4\">\n        The website offers you the service to collect data and store it indefinitely in order to create documents based on it.\n      </h4>\n      <hr />\n      <p className=\"mb-0\">\n        All datasets are stored in encrypted form.\n        <br />\n        The webapp does not collect metadata.\n      </p>\n      <br />\n      <br />\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">API</h5>\n          <h6 className=\"card-subtitle mb-2 text-muted\">Try the API-Interface!</h6>\n          <p className=\"card-text\">\n            The webapp offers you the option to write your own interface or to integrate the webapp\n            into your own application using the API.\n          </p>\n          <a href=\"/api\" class=\"card-link\">Open Swagger API UI</a>\n        </div>\n      </div>\n      <br />\n      <div className=\"card\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">Q&A</h5>\n          <p className=\"card-text\">\n            If you have questions about the functionality, read the documentation on Github!\n            If you want to report a problem use the features provided by Github or write an email!\n          </p>\n          <a href=\"http://www.github.com/Val-E/Document_and_Content_Management_System/\" class=\"card-link\">Github</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useState, useContext } from 'react';\n\nimport { MessageContext, UserPasswordContext } from '../Context';\n\n\nexport const Login = () => {\n  /* initialize all variable for all changeable values */\n  const [groupName, setGroupName] = useState(''),\n        [username, setUsername] = useState(''),\n\n        { setMessage } = useContext(MessageContext),\n        { userPassword, setUserPassword } = useContext(UserPasswordContext);\n\n  /* log in form */\n  return (\n    <div className=\"container\">\n      <div className=\"row g-4\">\n        <div className=\"col-md\">\n          <label for=\"group_name\" className=\"visually-hidden\">Group Name</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"group_name\"\n            name=\"group_name\"\n            placeholder=\"Group Name\"\n            onChange={e => setGroupName(e.target.value)}\n          />\n        </div>\n\n        <div className=\"col-md\">\n          <label for=\"username\" className=\"visually-hidden\">Your Username</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"username\"\n            name=\"username\"\n            placeholder=\"Your Username\"\n            onChange={e => setUsername(e.target.value)}\n          />\n        </div>\n\n        <div className=\"col-md\">\n          <label for=\"user_password\" className=\"visually-hidden\">Your Password</label>\n          <input\n            type=\"password\"\n            className=\"form-control\"\n            id=\"user_password\"\n            name=\"user_password\"\n            placeholder=\"Your Password\"\n            onChange={e => setUserPassword(e.target.value)}\n          />\n        </div>\n\n        <div className=\"col-auto\">\n          {/* send data to api */}\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary mb-3\"\n            onClick={ () => {\n              fetch(\n                '/api/auth/login',\n                {\n                  method: 'post',\n                  headers: {\"content-type\": \"application/json; charset=utf-8\"},\n                  body: JSON.stringify({\n                    'group_name': groupName,\n                    'username': username,\n                    'user_password': userPassword\n                  })\n                }\n              ).then(response => response.json())\n               .then(response => setMessage(response))\n               .catch(error => console.log(error));\n            }}\n          >\n            Login!\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState, useContext } from 'react';\n\nimport { MessageContext, UserPasswordContext } from '../Context';\n\n\nexport const SignUp = () => {\n  /* initialize all variable for all changeable values */\n  const { setMessage } = useContext(MessageContext),\n        { userPassword, setUserPassword } = useContext(UserPasswordContext),\n\n        [groupName, setGroupName] = useState(''),\n        [groupPassword, setGroupPassword] = useState(''),\n        [username, setUsername] = useState('');\n\n  /* form to sign up a user */\n  return (\n    <div className=\"container\">\n      <div className=\"mb-3 row\">\n        <label for=\"group_name\" className=\"col-sm-2 col-form-label\">Your Group</label>\n        <div className=\"col-sm-10\">\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"group_name\"\n            name=\"group_name\"\n            placeholder=\"Your Group\"\n            onChange={e => setGroupName(e.target.value)}\n          />\n        </div>\n      </div>\n      <div className=\"mb-3 row\">\n        <label for=\"group_password\" className=\"col-sm-2 col-form-label\">Group Password</label>\n        <div className=\"col-sm-10\">\n          <input\n            type=\"password\"\n            className=\"form-control\"\n            id=\"group_password\"\n            name=\"group_password\"\n            placeholder=\"Group Password\"\n            onChange={e => setGroupPassword(e.target.value)}\n          />\n        </div>\n      </div>\n      <hr />\n      <div className=\"row g-4\">\n        <div className=\"col-md\">\n          <label for=\"username\" className=\"visually-hidden\">Your Username</label>\n          <input\n            type=\"text\"\n            className=\"form-control\"\n            id=\"username\"\n            name=\"username\"\n            placeholder=\"Your Username\"\n            onChange={e => setUsername(e.target.value)}\n          />\n        </div>\n        <div className=\"col-md\">\n          <label for=\"user_password\" className=\"visually-hidden\">Your Password</label>\n          <input\n            type=\"password\"\n            className=\"form-control\"\n            id=\"user_password\"\n            name=\"user_password\"\n            placeholder=\"Your Password\"\n            onChange={e => setUserPassword(e.target.value)}\n          />\n        </div>\n\n        <div className=\"col-auto\">\n          {/* send data to api */}\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary mb-3\"\n            onClick={ () => {\n              fetch(\n                '/api/auth/sign-up',\n                {\n                  method: 'post',\n                  headers: {\"content-type\": \"application/json; charset=utf-8\"},\n                  body: JSON.stringify({\n                    'group_name': groupName,\n                    'group_password': groupPassword,\n                    'username': username,\n                    'user_password': userPassword\n                  })\n                }\n              ).then(response => response.json())\n               .then(response => setMessage(response))\n               .catch(error => console.log(error));\n            }}\n          >\n            Sign Up!\n          </button>\n        </div>\n      </div>\n      <br />\n    </div>\n  );\n}\n","import React, { useState, useContext } from 'react';\n\nimport { MessageContext } from '../Context';\n\n\nexport const SignUpGroup = () => {\n  /* initialize all variable for all changeable values */\n  const { setMessage } = useContext(MessageContext),\n\n        [groupName, setGroupName] = useState(''),\n        [groupPassword, setGroupPassword] = useState(''),\n        [topics, setTopics] = useState('');\n\n\n  /* form to sign a group */\n  return (\n    <div className=\"container\">\n      <div className=\"form-floating mb-3\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          id=\"group_name\"\n          name=\"group_name\"\n          placeholder=\"Group Name\"\n          onChange={e => setGroupName(e.target.value)}\n        />\n        <label for=\"group_name\">Group Name</label>\n      </div>\n\n      <div className=\"form-floating\">\n        <input\n          type=\"password\"\n          className=\"form-control\"\n          id=\"group_password\"\n          name=\"group_password\"\n          placeholder=\"Group Password\"\n          onChange={e => setGroupPassword(e.target.value)}\n        />\n        <label for=\"group_password\">Group Password</label>\n      </div>\n\n      <br />\n      <div className=\"form-floating\">\n        <textarea\n          className=\"form-control\"\n          id=\"topics\"\n          name=\"topics\"\n          style={{ height: 100 }}\n          placeholder=\"Topics\"\n          onChange={e => setTopics(e.target.value)}\n        ></textarea>\n        <label for=\"topics\">Topics</label>\n      </div>\n      <hr />\n\n      <center>\n        {/* send data to api */}\n        <button\n          type=\"submit\"\n          className=\"btn btn-primary mb-3\"\n          onClick={ () => {\n            fetch(\n              '/api/auth/sign-up-group',\n              {\n                method: 'post',\n                headers: {\"content-type\": \"application/json; charset=utf-8\"},\n                body: JSON.stringify({\n                  'group_name': groupName,\n                  'group_password': groupPassword,\n                  'topics': topics.split(';').filter(topic => topic)\n                })\n              }\n            ).then(response => response.json())\n             .then(response => setMessage(response))\n          }}\n        >\n          Sign Up Group!\n        </button>\n      </center>\n    </div>\n  );\n}\n","import { useState, useEffect, useContext } from 'react';\n\nimport { MessageContext, UserPasswordContext } from '../../Context';\n\n\nexport const VerifyKeys = () => {\n  /* initialize all variable for all changeable values */\n  const {userPassword, setUserPassword} = useContext(UserPasswordContext),\n        { setMessage } = useContext(MessageContext),\n\n        [classList, setClassList] = useState([]),\n        [userList, setUserList] = useState([]);\n\n\n  /* check for new verification requirements on load */\n  useEffect(() => {\n    checkVerifications();\n  }, []);\n\n  /*\n   * fetch lists with class and user names from server\n   * and lists to state\n  */\n  const checkVerifications = () => {\n    fetch(\n      '/api/verify-keys/get-assigned-data',\n      {\n        method: 'get',\n        headers: {\"content-type\": \"application/json; charset=utf-8\"},\n      }\n    )\n    .then(response => response.json())\n    .then(response => {\n      setClassList(response.classes);\n      setUserList(response.users);\n    })\n    .catch(error => console.log(error));\n  }\n\n  return (\n    <div className=\"container container-fluid\">\n      <h4 className=\"h4\">Key Administration!</h4>\n\n      {/* button to fetch updated list */}\n      <div className=\"btn-group me-2\" role=\"group\">\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-primary btn-lg\"\n          onClick={e => checkVerifications() }\n        >\n          Update!\n        </button>\n\n        {/* button to clear unverified lists */}\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-danger btn-lg\"\n          onClick={() => {\n            fetch(\n              '/api/verify-keys/clear-unverified-keys',\n              {\n                method: 'get',\n                headers: {\"content-type\": \"application/json; charset=utf-8\"},\n              }\n            )\n            .then(response => response.json())\n            .then(response => setMessage(response))\n            .then(e => checkVerifications())\n            .catch(error => console.log(error));\n          }}\n        >\n          Clear Unverified Keys!\n        </button>\n\n        {/* button to send post request to verified keys */}\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-warning btn-lg\"\n          onClick={ () => {\n            fetch(\n              '/api/verify-keys/verify',\n              {\n                method: 'post',\n                headers: {\"content-type\": \"application/json; charset=utf-8\"},\n                body: JSON.stringify({'user_password': userPassword})\n              }\n            )\n            .then(response => response.json())\n            .then(response => setMessage(response))\n            .then(e => checkVerifications())\n            .catch(error => console.log(error));\n          }}\n        >\n          Verify Keys!\n        </button>\n\n        {/* password input field, only required for verification */}\n        <div className=\"form-floating\">\n          <input\n            type=\"password\"\n            id=\"user_password\"\n            name=\"user_password\"\n            className=\"border border-warning border-rounded form-control\"\n            aria-describedby=\"user_password\"\n            value={userPassword}\n            onChange={e => setUserPassword(e.target.value)}\n          />\n          <label for=\"user_password\">User Password</label>\n        </div>\n      </div>\n      <br />\n\n      <div className=\"container container-fluid\">\n        <table>\n          <tr>\n            <td style={{padding: 50}}>\n              <ol className=\"list-group list-group-numbered\">\n                { classList.length > 0 ? (<h5 className=\"h5\">Must be verified:</h5>): null }\n                {\n                  classList.map(_class => {\n                    return (<li className=\"list-group-item\">{ _class }</li>);\n                  })\n                }\n              </ol>\n            </td>\n            <td style={{padding: 50}}>\n              {/*\n                * Display a list of users, which have to verify keys from classes of the current user\n                * and a list of classes with unverified keys from the current user.\n                */}\n              <ol className=\"list-group list-group-numbered\">\n                { userList.length > 0 ? (<h5 className=\"h5\">Need to verify:</h5>): null }\n                {\n                  userList.map(user => {\n                    return (<li className=\"list-group-item\">{ user }</li>);\n                  })\n                }\n              </ol>\n            </td>\n          </tr>\n        </table>\n      </div>\n    </div>\n  );\n}\n","import { useState, useEffect, useContext } from 'react';\n\nimport { MessageContext } from '../../Context';\n\nimport { Messages } from '../../components/Messages';\n\n\nexport const AddDataForm = (values) => {\n  /* initialize all variable for all changeable values */\n  const { setMessage } = useContext(MessageContext),\n\n        [className, setClassName] = useState(''),\n        [datasetNumber, setDatasetNumber] = useState(0),\n        [tableForm, setTableForm] = useState([]),\n        [classList, setClassList] = useState([]),\n\n        lists = values.value.lists,\n        form = values.value.form,\n\n        [globalDatasetDict] = useState({}),\n        [irregularData] = useState([]),\n\n        [updateNeed, updateTrigger] = useState(0);\n\n  useEffect(() => {\n    if (form === 'addDatasets') {\n      /* fetch existing classes */\n      fetch(\n        '/api/sign-up-data/get-class-list',\n        {\n          method: 'get',\n          headers: {\"content-type\": \"application/json; charset=utf-8\"}\n        }\n      ).then(response => response.json())\n       .then(response => setClassList(response['class_list']))\n       .catch(error => console.log(error));\n    }\n  }, [form]);\n\n  /* update table form if number of datasets changes or a global value was set */\n  useEffect(() => {\n    /* initialize table HTML */\n    var table = [];\n\n    /* update dictionary with irregularData */\n    for (let index = 0; index < datasetNumber; index++) {\n      if (!irregularData[index]) {\n        irregularData.push({});\n        for (let topic of lists.topic_list) {\n          irregularData[index][topic] = '';\n        }\n      }\n\n      /* push forms */\n      table.push(\n        <tr>\n          { lists.topic_list.map(topic => {\n             return (\n                <td>\n                  <center>\n                    <div className=\"form-floating\" style={{ 'width': '190px' }}>\n                      <input\n                        type=\"text\"\n                        name={ `dataset-${ index }-${ topic }` }\n                        id={ `dataset-${ index }-${ topic }` }\n                        className=\"form-control\"\n                        placeholder={ topic }\n                        list=\"user_list\"\n                        value={\n                          irregularData[index][topic] ? irregularData[index][topic]: globalDatasetDict[topic]\n                        }\n                        onChange={ e => {\n                          irregularData[index][topic] = e.target.value;\n                          if (updateNeed === 0) { updateTrigger(1) }\n                          else { updateTrigger(0) }\n                        }}\n                      />\n                      <label for={ `dataset-${ index }-${ topic }` }> User for { topic }</label>\n                    </div>\n                  </center>\n                </td>\n              );\n            })\n          }\n        </tr>\n      );\n    }\n\n    irregularData.length = Math.round(Math.abs(datasetNumber));\n\n    setTableForm(table);\n  }, [datasetNumber, updateNeed]);\n\n\n  /* return Modal */\n  return (\n    <div className='container modal-content'>\n      <div className=\"modal-header\">\n        <h5 className=\"modal-title\" id=\"newClassLabel\">\n          {/* render modal header */}\n          { form === 'addClass' ? ('Add Class') : ('Add Datasets') }\n        </h5>\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n      </div>\n\n      <div className=\"modal-body form-group\">\n        <div className=\"row g-3 align-items-center\">\n          <Messages />\n          {/*\n            * Form to set number of datasets and class name\n            */}\n          <div className=\"col-md\">\n            <div className=\"form-floating\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                list={form === 'addDatasets' ? ('class_list'): null}\n                id=\"class_name\"\n                name=\"class_name\"\n                placeholder=\"Class Name\"\n                aria-describedby=\"class_name\"\n                onChange={e => setClassName(e.target.value)}\n              />\n              <label for=\"class_name\">Class Name</label>\n\n              {/*\n                * class list is used for suggestions in form for adding datasets\n                */}\n              <datalist id=\"class_list\">\n                {\n                  classList.map( _class => {\n                    return (<option>{ _class }</option>);\n                  })\n                }\n              </datalist>\n            </div>\n          </div>\n\n          <div className=\"col-md\">\n            <div className=\"form-floating\">\n              <input\n                type=\"number\"\n                id=\"dataset_number\"\n                name=\"dataset_number\"\n                className=\"form-control\"\n                placeholder=\"Number of Datasets\"\n                aria-describedby=\"dataset_number\"\n                onChange={e => setDatasetNumber(e.target.value)}\n              />\n              <label for=\"dataset_number\">Number of Datasets</label>\n            </div>\n          </div>\n        </div>\n        <hr />\n        <br />\n        <br />\n\n        {/*\n          * user list is used for suggestions in table form\n          */}\n        <datalist id=\"user_list\">\n          {\n            lists.user_list.map(user => {\n              return (<option>{ user }</option>);\n            })\n          }\n        </datalist>\n\n        {/* make the table form fit the modal */}\n        <div\n          style={{\n            'overflow-x': 'scroll',\n            'height': '500px',\n          }}\n        >\n          {/* Table HTML */}\n          <table\n            className={\n              `table table-bordered border-dark\n              ${ form === 'addClass' ? ('table-primary'): ('table-success')}\n              table-striped`\n            }\n          >\n            <thead>\n              <tr>\n                { lists.topic_list.map(topic => {\n                    return (\n                      <th className=\"bg-info\" scope=\"col\">\n                        <center> { topic } </center>\n                      </th>\n                    );\n                  })\n                }\n              </tr>\n\n              <tr>\n                {/*\n                  * configure global values using table header\n                  * Call update hook by editing updateNeed flag\n                 */}\n                { lists.topic_list.map(topic => {\n                    return (\n                      <td className=\"bg-danger\" >\n                        <center>\n                          <div className=\"form-floating\" style={{ 'width': '190px' }}>\n                            <input\n                              type=\"text\"\n                              name={ `global-${topic}` }\n                              id={ `global-${topic}` }\n                              className=\"form-control\"\n                              placeholder={ topic }\n                              list=\"user_list\"\n                              onChange={ e => {\n                                globalDatasetDict[topic] = e.target.value;\n                                if (updateNeed === 0) { updateTrigger(1) }\n                                else { updateTrigger(0) }\n                              }}\n                            />\n                            <label for={ `global-${topic}` }>User for {topic}</label>\n                          </div>\n                        </center>\n                      </td>\n                    );\n                  })\n                }\n              </tr>\n            </thead>\n            <tbody>\n              { tableForm }\n            </tbody>\n          </table>\n        </div>\n      </div>\n\n      <div className=\"modal-footer\">\n        {/* send data to api */}\n        <button\n          type=\"button\"\n          className=\"btn btn-primary\"\n          onClick={ () => {\n            irregularData.push(globalDatasetDict);\n\n            if (form === 'addClass') {\n              var url = '/api/sign-up-data/sign-up-class';\n            } else {\n              var url = '/api/sign-up-data/sign-up-datasets';\n            }\n\n            fetch(\n              url,\n              {\n                method: 'post',\n                headers: {\"content-type\": \"application/json; charset=utf-8\"},\n                body: JSON.stringify({\n                  'class_name': className,\n                  'datasets': irregularData\n                })\n              }\n            ).then(response => response.json())\n             .then(response => setMessage(response))\n             .catch(error => console.log(error));\n\n             irregularData.pop();\n          }}\n        >\n          {/* render modal submit button */}\n          { form === 'addClass' ? ('Sign Up Class') : ('Sign Up Datasets') }\n        </button>\n        <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close!</button>\n      </div>\n    </div>\n  )\n}\n","import { useState, useContext } from 'react';\n\nimport { MessageContext, UserPasswordContext } from '../../Context';\n\nimport { Messages } from '../../components/Messages';\n\n\nexport const EditValuesForm = (values) => {\n  /* initialize all variable for all changeable values */\n  const { setMessage } = useContext(MessageContext),\n        {userPassword, setUserPassword} = useContext(UserPasswordContext),\n\n        [classGroups, setClassGroups] = useState([]),\n\n        form = values.values.form,\n        topic_list = values.values.lists.topic_list;\n\n\n  /* Push changes to database! */\n  const pushData = (dataId, newData) => {\n    fetch(\n      '/api/manipulate-entries/push-data',\n      {\n        method: 'post',\n        headers: {\"content-type\": \"application/json; charset=utf-8\"},\n        body: JSON.stringify({\n          'data_id': dataId,\n          'new_data': newData,\n          'user_password': userPassword\n        })\n      }\n    ).then(response => response.json())\n     .then(response => {setMessage(response)})\n     .catch(error => console.log(error));\n  }\n\n  /* Get datasets from database! */\n  const getDatasets = () => {\n    fetch(\n      '/api/manipulate-entries/get-datasets',\n      {\n        method: 'post',\n        headers: {\"content-type\": \"application/json; charset=utf-8\"},\n        body: JSON.stringify({'user_password': userPassword})\n      }\n    ).then(response => response.json())\n     .then(response => {\n       if (Object.keys(response).indexOf('msg') >= 0) {\n         setMessage(response);\n       }\n       else {\n         setClassGroups(response.class_groups);\n       }\n     })\n     .catch(error => console.log(error));\n  }\n\n  /* Get datasets from database! */\n  const deleteData = (body) => {\n    fetch(\n      '/api/manipulate-entries/delete-data',\n      {\n        method: 'post',\n        headers: {\"content-type\": \"application/json; charset=utf-8\"},\n        body: JSON.stringify(body)\n      }\n    ).then(response => response.json())\n     .then(response => setMessage(response))\n     .catch(error => console.log(error));\n  }\n\n  return(\n    <div className='container modal-content'>\n      <div className=\"modal-header\">\n        <h5 className=\"modal-title\" id=\"newClassLabel\">\n          { form === 'editData' ? ('Edit Class Values'): ('Delete Data')}\n        </h5>\n        <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\"></button>\n      </div>\n\n      <div className=\"modal-body form-group\">\n        <div className=\"row g-3 align-items-center\">\n          <Messages />\n          <div className=\"btn-group me-2\" role=\"group\">\n            {/* button to send post request to get datasets */}\n            <button\n              type=\"button\"\n              className=\"btn btn-outline-success\"\n              onClick={ e => getDatasets() }\n            >\n              Get Datasets!\n            </button>\n\n            {/*\n              * password input field,\n              * the password is required for all operations on this modal\n              */}\n            <div className=\"form-floating\">\n              <input\n                type=\"password\"\n                id=\"user_password\"\n                name=\"user_password\"\n                className=\"border border-success border-rounded form-control\"\n                aria-describedby=\"user_password\"\n                defaultValue={userPassword}\n                onChange={e => setUserPassword(e.target.value)}\n              />\n              <label for=\"user_password\">User Password</label>\n            </div>\n          </div>\n          <br />\n          <hr />\n\n          <div\n            style={{\n              'overflow-x': 'scroll',\n              'height': '500px',\n            }}\n          >\n            {/* Table HTML */}\n            { Object.keys(classGroups).map(class_name => {\n              return (\n                <div className=\"container container-fluid\">\n                  <table className=\"table table-bordered border-dark table-striped\">\n                    {/* table header */}\n                    <thead>\n                      {/* class name */}\n                      <tr>\n                        <th\n                          className=\"bg-warning\"\n                          colspan={ form === 'editData' ? (`${topic_list.length}`): (`${topic_list.length + 1}`)}\n                        >\n                          <center>\n                            { form === 'editData' ? (\n                              <div>\n                                { class_name }\n                              </div>\n                            ): (\n                                <button\n                                  type=\"button\"\n                                  id={`class-${classGroups[class_name].class_id}`}\n                                  name={`class-${classGroups[class_name].class_id}`}\n                                  className=\"btn btn-danger\"\n                                  onClick={e => deleteData({'class_id': classGroups[class_name].class_id})}\n                                >\n                                  Delete <span className=\"badge bg-light text-danger\">{ class_name }</span>\n                                </button>\n                            )}\n                          </center>\n                        </th>\n                      </tr>\n                     {/* topics used to order data */}\n                      <tr>\n                        { form === 'deleteData' ? (\n                          <th className=\"bg-info\">\n                             <center>#</center>\n                           </th>\n                        ): null }\n\n                        { topic_list.map(topic_name => {\n                          return (\n                           <th className=\"bg-info\">\n                             <center>{ topic_name }</center>\n                           </th>\n                          );\n                        })}\n                      </tr>\n                    </thead>\n                    <tbody>\n                      { classGroups[class_name].datasets.map(dataset => {\n                        return (\n                          <tr>\n                            { form === 'deleteData'? (\n                              <td className=\"bg-primary lol\">\n                                <center>\n                                  <button\n                                    name={ `dataset-${ dataset.dataset_id }` }\n                                    id={ `dataset-${ dataset.dataset_id }` }\n                                    type=\"button\"\n                                    className=\"btn btn-danger\"\n                                    onClick={e => deleteData({'dataset_id': dataset.dataset_id})}\n                                  >\n                                    Delete <span className=\"badge bg-light text-danger\">Dataset</span>\n                                  </button>\n                                </center>\n                              </td>\n                            ): null }\n\n                            {/* generate dataset row */}\n                            { topic_list.map(topic => {\n                              var data = dataset[topic];\n                              if (data) {\n                                /* generate data submit field */\n                                return (\n                                  <td className=\"bg-primary\">\n                                    <center>\n                                      { form === 'editData' ? (\n                                        <div className=\"form-floating\" style={{ 'width': '190px' }}>\n                                          <input\n                                            type=\"text\"\n                                            name={ `data-${ data.data_id}` }\n                                            id={ `data-${ data.data_id }` }\n                                            className=\"form-control\"\n                                            style={{ 'width': '190px' }}\n                                            placeholder={ topic }\n                                            defaultValue={ data.record }\n                                            onChange={ e => pushData(data.data_id, e.target.value)}\n                                          />\n                                          <label for={ `data-${ data.record }` }> Content for { topic }</label>\n                                        </div>\n                                      ): (\n                                        <button\n                                          name={ `data-${ data.data_id}` }\n                                          id={ `data-${ data.data_id }` }\n                                          type=\"button\"\n                                          className=\"btn btn-danger\"\n                                          onClick={e => deleteData({'data_id': data.data_id})}\n                                        >\n                                          Delete <span className=\"badge bg-light text-danger\">{ data.record }</span>\n                                        </button>\n                                      )}\n                                    </center>\n                                  </td>\n                                );\n                              } else { return (<td className=\"bg-primary\"></td>) }\n                            })}\n                          </tr>\n                        );\n                      })}\n                    </tbody>\n                  </table>\n                  <br />\n                </div>\n              );\n            })}\n          </div>\n\n          {/* make the table form fit the modal */}\n        </div>\n      </div>\n\n      <div className=\"modal-footer\">\n        <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\">Close!</button>\n      </div>\n    </div>\n  );\n}\n","import { useContext } from 'react';\nimport { saveAs } from 'file-saver'\n\nimport { MessageContext, UserPasswordContext } from '../../Context';\n\n\nexport const DownloadDatasets = () => {\n  /* initialize all variable for all changeable values */\n  const {userPassword, setUserPassword} = useContext(UserPasswordContext),\n        { setMessage } = useContext(MessageContext);\n\n  return (\n    <div className=\"container container-fluid\">\n      <h4 className=\"h4\">Download Datasets!</h4>\n      <div className=\"btn-group me-2\" role=\"group\">\n        {/* button to send download request */}\n        <button\n          type=\"button\"\n          className=\"btn btn-outline-secondary btn-lg\"\n          onClick={ () => {\n            fetch(\n              '/api/get-files/download-datasets',\n              {\n                method: 'post',\n                headers: {\"content-type\": \"application/json; charset=utf-8\"},\n                body: JSON.stringify({'user_password': userPassword})\n              }\n            )\n            .then(response => response.blob())\n            .then((response) => {\n              if (response.type === 'application/json') {\n                setMessage({'msg': 'An error occurred.', 'category': 'danger'});\n              } else {\n                saveAs(response, 'package.zip');\n              }\n            })\n            .catch(error => console.log(error));\n          }}\n        >\n          Download Datasets\n        </button>\n\n        <div className=\"form-floating\">\n          {/* password input field, only required for verification */}\n          <input\n            type=\"password\"\n            id=\"user_password\"\n            name=\"user_password\"\n            className=\"border border-secondary border-rounded form-control\"\n            aria-describedby=\"user_password\"\n            value={userPassword}\n            onChange={e => setUserPassword(e.target.value)}\n          />\n          <label for=\"user_password\">User Password</label>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import { useState, useEffect } from 'react';\n\nimport { VerifyKeys } from '../components/dashboard/VerifyKeys';\nimport { AddDataForm } from '../components/dashboard/AddDataForm';\nimport { EditValuesForm } from '../components/dashboard/EditValuesForm'\nimport { DownloadDatasets } from '../components/dashboard/DownloadDatasets'\n\n\nexport const Dashboard = () => {\n  /* initialize all variable for all changeable values */\n  const [modalContent, setModalContent] = useState([]),\n        [lists, setLists] = useState([]);\n\n  /* get topics and users of the group from api */\n  useEffect(() => {\n    fetch(\n      '/api/sign-up-data/get-topic-user-lists',\n      {\n        method: 'get',\n        headers: {\"content-type\": \"application/json; charset=utf-8\"}\n      }\n    ).then(response => response.json())\n     .then(response => setLists(response))\n     .catch(error => console.log(error));\n  }, []);\n\n  /* Dashboard HTML */\n  return (\n    <div className=\"container\">\n      <center>\n        <h1 className=\"h1\">Dashboard</h1>\n        <hr />\n        <br />\n\n        <div className=\"container container-fluid\">\n          <h4 className=\"h4\">Class Administration</h4>\n          <div className=\"container container-fluid mb-3\" role=\"toolbar\" aria-label=\"Toolbar with button groups\">\n            <div className=\"btn-group me-2\" role=\"group\" aria-label=\"First group\">\n              <button\n                type=\"button\"\n                className=\"btn btn-outline-info btn-lg\"\n                data-bs-toggle=\"modal\"\n                data-bs-target=\"#modal\"\n                onClick={ () => setModalContent(<AddDataForm value={{'lists': lists, 'form': 'addClass'}} />)}\n              >\n                Add Class\n              </button>\n              <button\n                type=\"button\"\n                className=\"btn btn-outline-info btn-lg\"\n                data-bs-toggle=\"modal\"\n                data-bs-target=\"#modal\"\n                onClick={ () => setModalContent( <AddDataForm value={{'lists': lists, 'form': 'addDatasets'}} /> )}\n              >\n                Add Datasets\n              </button>\n            </div>\n\n            <div className=\"btn-group me-2\" role=\"group\" aria-label=\"Second group\">\n              <button\n                type=\"button\"\n                className=\"btn btn-outline-danger btn-lg\"\n                data-bs-toggle=\"modal\"\n                data-bs-target=\"#modal\"\n                onClick={ () => setModalContent(<EditValuesForm values={{'lists': lists, 'form': 'deleteData'}}/>)}\n              >\n                Delete Data\n              </button>\n            </div>\n\n            <div className=\"btn-group\" role=\"group\" aria-label=\"Third group\">\n              <button\n                type=\"button\"\n                className=\"btn btn-outline-primary btn-lg\"\n                data-bs-toggle=\"modal\"\n                data-bs-target=\"#modal\"\n                onClick={ () => setModalContent(<EditValuesForm values={{'lists': lists, 'form': 'editData'}}/>)}\n              >\n                Edit Class Values\n              </button>\n            </div>\n          </div>\n        </div>\n\n        <br />\n        <br />\n\n        <DownloadDatasets />\n\n        <br />\n        <br />\n\n        <VerifyKeys />\n\n\n        <div className=\"modal fade\" id=\"modal\" tabindex=\"-1\" aria-labelledby=\"modal\" aria-hidden=\"true\">\n          <div className=\"modal-dialog modal-xl\">\n            { modalContent }\n          </div>\n        </div>\n\n      </center>\n    </div>\n  );\n}\n","import { useState } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { Redirect } from 'react-router';\n\nimport { Header } from './components/Header';\nimport { Messages } from './components/Messages';\nimport { Footer } from './components/Footer';\n\nimport { HandleRedirections } from './scripts/HandleRedirections';\n\nimport { MessageContext, UserPasswordContext } from './Context';\nimport './index.css';\n\nimport { Home } from './routes/Home';\nimport { Login } from './routes/Login';\nimport { SignUp } from './routes/SignUp';\nimport { SignUpGroup } from './routes/SignUpGroup';\nimport { Dashboard } from './routes/Dashboard';\n\n\nexport const App = () => {\n  const [message, setMessage] = useState(''),\n        [userPassword, setUserPassword] = useState('');\n\n  return(\n    <Router>\n      { window.location.pathname === '/' ? <Redirect to='/home' /> : null }\n      { window.isAuthenticated ? <Redirect to='/dashboard' /> : null }\n\n      <MessageContext.Provider value={{message, setMessage}}>\n        <UserPasswordContext.Provider value={{userPassword, setUserPassword}}>\n          <Route path='/'>\n            <HandleRedirections />\n            <Header />\n            <Messages />\n            <Footer />\n          </Route>\n\n          <Route path='/home' component={Home} />\n          <Route path='/auth/sign-up' component={SignUp} />\n          <Route path='/auth/sign-up-group' component={SignUpGroup} />\n          <Route path='/auth/login' component={Login} />\n          <Route path='/dashboard' component={Dashboard} />\n        </UserPasswordContext.Provider>\n      </MessageContext.Provider>\n    </Router>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('app')\n);\n"],"sourceRoot":""}